import javax.swing.*;
import java.io.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.text.*;


public class Settings extends JFrame implements ActionListener
{
	
	public static final int WIDTH = 258;
    public static final int HEIGHT = 600;
    
    private JTabbedPane outputPanel, bellPanel;
    private JTextField numberbox;
    private int numberofschedules;
    private JPanel bellpanels[];
    
    private String hours[] = {"00","01","02","03","04","05","06","07","08","09",
    						  "10","11","12","13","14","15","16","17","18","19",
    						  "20","21","22","23"};
    private JComboBox hoursbox[][][];
    
    private String minutes[] = {"00","01","02","03","04","05","06","07","08","09",
    						    "10","11","12","13","14","15","16","17","18","19",
    						    "20","21","22","23","24","25","26","27","28","29",
    						    "30","31","32","33","34","35","36","37","38","39",
    						    "40","41","42","43","44","45","46","47","48","49",
    						    "50","51","52","53","54","55","56","57","58","59"};
    private JComboBox minutesbox[][][];
    
    // [a][b][c]
    //a = the tab
    // b = the row
    //c = 1 of 2, the start time and the finish time.
    
   JButton Savebutton;
    
    private JTextField textfields[];
    
    JPanel panel1, panel2;
	Container contentPane;
	public Settings()
	{
		//ReadCurrentSchedules();
		setSize(WIDTH, HEIGHT);
		setResizable(false);
        setTitle("Settings - DEVELOPMENT BUILD");
        contentPane = getContentPane( );
        contentPane.setLayout(new BorderLayout( ));
        JFrame myWindow = new JFrame();
        myWindow.getContentPane().setLayout(new BorderLayout());
        addWindowListener(new WindowCloser(myWindow));
      
      	// the tabbed pane and all the tabs
         outputPanel = new JTabbedPane();
      
        // the main panel.  Everything is added here. 
        JPanel main_panel = new JPanel();
        main_panel.setLayout(new FlowLayout());
        contentPane.add(main_panel);
        
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout());
        outputPanel.addTab("Bell Schedule",panel1);
        panel1.setBackground(FileIo.ReadInBackgroundColor());
		outputPanel.setMnemonicAt(0, KeyEvent.VK_T);
		
		panel2 = new JPanel();
    	outputPanel.addTab("Colors", panel2);
    	panel2.setBackground(FileIo.ReadInBackgroundColor());
		outputPanel.setMnemonicAt(1, KeyEvent.VK_G);
		
		JButton colorButton = new JButton("Choose Background Color");
    	colorButton.addActionListener(this);
    	panel2.add(colorButton);
    	
    	JButton textButton = new JButton("     Choose Text Color          ");
    	textButton.addActionListener(this);
    	panel2.add(textButton);
    	
    	//----------------------------------------------------------------------
    	//these go on the top of panel1
    	
    	JPanel north_panel1 = new JPanel();
    	north_panel1.setBackground(FileIo.ReadInBackgroundColor());
    	north_panel1.setLayout(new BorderLayout());
    	panel1.add(north_panel1, BorderLayout.NORTH);
    	
    	// the textbox and the jfield go here. 
    	JPanel westflow_north_panel1 = new JPanel();
    	westflow_north_panel1.setLayout(new FlowLayout());
    	westflow_north_panel1.setBackground(FileIo.ReadInBackgroundColor());
    	north_panel1.add(westflow_north_panel1, BorderLayout.WEST);
    	
    	JLabel numberboxlabel = new JLabel("     Number of bell schedules:");
    	numberboxlabel.setForeground(FileIo.ReadInTextColor());
    	westflow_north_panel1.add(numberboxlabel);
    	
    	numberbox = new JTextField(3);
    	westflow_north_panel1.add(numberbox);
    	numberbox.addActionListener(this);
    	
    	// the JButton goes on this panel so that it doesn't get distorted. 
    	JPanel southflow_north_panel1 = new JPanel();
    	southflow_north_panel1.setLayout(new FlowLayout());
    	southflow_north_panel1.setBackground(FileIo.ReadInBackgroundColor());
    	north_panel1.add(southflow_north_panel1, BorderLayout.SOUTH);
    	
    	JButton okbutton = new JButton("OK");
    	southflow_north_panel1.add(okbutton, BorderLayout.SOUTH);
    	okbutton.addActionListener(this);
    	
    	Savebutton = new JButton("Save");
    	Savebutton.addActionListener(this);
    	southflow_north_panel1.add(Savebutton, BorderLayout.SOUTH);
    	
    	// this goes at the bottom of panel1. This is the JTabbed pane. 
    	bellPanel = new JTabbedPane();
    	panel1.add(bellPanel, BorderLayout.CENTER);
    	
    	
    	
    	//----------------------------------------------------------------------
        contentPane.add(outputPanel, BorderLayout.CENTER);
       // ReadCurrentSchedules();
	}
	
	public void ReadCurrentSchedules()
	{ 
		numberofschedules = 0;
		//count the number of schedules and create that many tabs. 
		
		while((new File("schedules\\" + numberofschedules + ".dat").exists()))
		{
			numberofschedules++;
		}
		//create those tabs.
		bellpanels = new JPanel[numberofschedules];
		textfields = new JTextField[numberofschedules];
		
		for(int c = 0; c < numberofschedules; c++)
		{
			bellpanels[c] = new JPanel();
			bellPanel.addTab(Integer.toString(c+1),bellpanels[c]);
			bellpanels[c].setBackground(FileIo.ReadInBackgroundColor());	
			bellpanels[c].setLayout(new BorderLayout());
			// creates the options for the number of periods on that
			// schedule
			
			// the scope of this JLabel can be lost (its ok) once it is added to the JPanel
			JLabel numberofperiodslabel = new JLabel("Number of Periods:");
			numberofperiodslabel.setForeground(FileIo.ReadInTextColor());
			
			//initalizes all of the JTextFields that go on all of the JPanels. 
			
			textfields[c] = new JTextField(3);
			textfields[c].addActionListener(this);
			
			
			//creates a flow panel and adds it to the top of the bellpanels[x] panel.
			// this way the numberofperiods label and the text field look right. 
			
			JPanel north_bellpanel = new JPanel();
			north_bellpanel.setBackground(FileIo.ReadInBackgroundColor());
			north_bellpanel.setLayout(new FlowLayout());
			//adds the label and the text field, then adds that to the bellpanels[x]
			north_bellpanel.add(numberofperiodslabel);
			north_bellpanel.add(textfields[c]);
			bellpanels[c].add(north_bellpanel, BorderLayout.NORTH);
		}
		
		
		
		
		
		// the correct number of tabs is displayed. Now we need to set the periods on those tabs. 
		for(int t = 0; t < numberofschedules; t++)
		{
			//counts the number of lines in the text file. This should give us the number of periods. 
			int temp_numofperiods = 0;
	   		try
	    	{
	    		BufferedReader inputStream = new BufferedReader(new FileReader("schedules\\" + Integer.toString(t) + ".dat"));
	    		while(inputStream.readLine() != null)
	    		{
	    			temp_numofperiods++;
	    		}
	    		inputStream.close();
	    	}
	    	catch(FileNotFoundException e)
	    	{
	    		JOptionPane.showMessageDialog(null, "The File was not found! \n Make sure your input file exists. \n Error Code 017", "Error", JOptionPane.ERROR_MESSAGE);
				
				// makes the thread stop if the file cannot be found. 
				try
				{
					Thread.sleep(999999999);	
				}
				catch(Exception g)
				{
					
				}
	    	}
	    	catch(IOException e)
	    	{
	    		JOptionPane.showMessageDialog(null, "Error reading from saved text. \n Error Code 018", "Error", JOptionPane.ERROR_MESSAGE);
	    	} 
			
			
			
			int selectedtab = t;
			textfields[selectedtab].setText(Integer.toString(temp_numofperiods));
			// now that we know which tab the user is working on, we need to get the number of periods
			// the user wants to add to that schedule. 
			int numberofperiodsinbox;
			try
			{
				numberofperiodsinbox = Integer.parseInt(textfields[selectedtab].getText());
			}
			catch(Exception e)
			{
				JOptionPane.showMessageDialog(null, "The number you have entered is not a valid number, \n Default 1 will be used.", "Error", JOptionPane.ERROR_MESSAGE);
				numberofperiodsinbox = 1;
			}
			
			// now that we know how many periods the user wants to add to that period
			// the fields and labels need to be set up for that amount of time
			
			//creates an array of JComboBoxes for the hours and the minutes. 
			hoursbox = new JComboBox[numberofschedules][numberofperiodsinbox*2][2];
			minutesbox = new JComboBox[numberofschedules][numberofperiodsinbox*2][2];
			
			// initalize all of the comboboxes
			for(int aa = 0; aa < numberofschedules; aa++)
			{
				for(int c = 0; c < numberofperiodsinbox; c++)
				{
					hoursbox[aa][c][0] = new JComboBox(hours);
					minutesbox[aa][c][0] = new JComboBox(minutes);
					hoursbox[aa][c][1] = new JComboBox(hours);
					minutesbox[aa][c][1] = new JComboBox(minutes);
					
					//right here is a good place to set the selected indexes for the above comboboxes. 
					// because we're already going through a loop, and we know exactly which comboboxes we're dealing with.
					//we will need to read in the values from the current text file. 
					try
			    	{
			    		BufferedReader inputStream = new BufferedReader(new FileReader("schedules\\" + aa + ".dat"));
			    		
			    		String input_line = inputStream.readLine();
			    		String comma = ",";
			    		
			    		//sets the first hour
						int position1 = input_line.indexOf(comma) + 1;	// after the first comma.
						int position2 = input_line.indexOf(comma,position1); // the second comma. 
						String temp = input_line.substring(position1,position2);// should equal the first hour
			    		hoursbox[aa][c][0].setSelectedIndex(Integer.parseInt(temp));
			    		
			    		//sets the first minute.
			    		position1 = position2 + 1;
			    		position2 = input_line.indexOf(comma, position1);
			    		temp = input_line.substring(position1,position2); // should equal the first minute. 
			    		minutesbox[aa][c][0].setSelectedIndex(Integer.parseInt(temp));
			    		
			    		inputStream.close();
			    	}
			    	
			    	catch(FileNotFoundException e)
			    	{
			    	}
			    	catch(IOException e)
			    	{
			    	} 
					
					
					
				}
				
			}
			
			
			//this flowpanel serves for the west side of the bellpanels[c];
			//the labels are added to this flow, then the flow is added to the bellpanels.
			JPanel center_bellpanel = new JPanel();
			center_bellpanel.setLayout(new FlowLayout());
			center_bellpanel.setBackground(FileIo.ReadInBackgroundColor());
			
			// create an array of JLabels to be put on this tab. These will be the period numbers. 
			// sets the layout on this tab
			JLabel periodnumlabels[] = new JLabel[numberofperiodsinbox];
			for(int c = 0; c < numberofperiodsinbox; c++)
			{
				
				periodnumlabels[c] = new JLabel(Integer.toString(c));
				periodnumlabels[c].setForeground(FileIo.ReadInTextColor());
				center_bellpanel.add(periodnumlabels[c]);
				
				// now we need to add a JCombo for the hour
				center_bellpanel.add(hoursbox[selectedtab][c][0]);
				
				// adds the : between the hours and minutes
				
				JLabel colon = new JLabel(":");
				colon.setForeground(FileIo.ReadInTextColor());
				center_bellpanel.add(colon);
				
				// adds the minute box
				
				center_bellpanel.add(minutesbox[selectedtab][c][0]);
				
				// adds the TO in between the times
				JLabel to = new JLabel("to");
				to.setForeground(FileIo.ReadInTextColor());
				center_bellpanel.add(to);
				
				// sets the jcomboboxes up for the second time. 
			//	hoursbox[c+1] = new JComboBox(hours);
			//	minutesbox[c+1] = new JComboBox(minutes);
				
				// adds the end time
				center_bellpanel.add(hoursbox[selectedtab][c][1]);
				JLabel colon2 = new JLabel(":");
				colon2.setForeground(FileIo.ReadInTextColor());
				center_bellpanel.add(colon2);
				center_bellpanel.add(minutesbox[selectedtab][c][1]);
				
			}
			//------------------------------------------------------------------
			// This portion of code is STUPID!!!!!
			// the JComboBoxes will not appear w/o it. Dunno why. 
			// Possibly because the JPanel is not being updated, but this 
			//updates it somehow. 
			contentPane.invalidate();
			contentPane.validate();
			bellpanels[selectedtab].remove(center_bellpanel);
			bellpanels[selectedtab].add(center_bellpanel, BorderLayout.CENTER);
			setSize(WIDTH+1, HEIGHT);
			setSize(WIDTH-1, HEIGHT);
			//------------------------------------------------------------------
		}
		// now we need to set the JComboBoxes to the schedule in the file. 
		
	}
	
	public void actionPerformed(ActionEvent a)
	{
		
		String actionCommand = a.getActionCommand( );
		
		if(actionCommand.equals("Choose Background Color"))
		{
			Color bgColor= JColorChooser.showDialog(this,"Choose Background Color",getBackground());
    		if (bgColor != null)
    		{
    			panel2.setBackground(bgColor);
      			FileIo.WriteOutBackgroundColor(bgColor);
      			JOptionPane.showMessageDialog(null, "You must restart the program for your settings to take full effect.");
    		}
      				
		}
		else if(actionCommand.equals("     Choose Text Color          "))
		{
			Color bgColor= JColorChooser.showDialog(this,"Choose Text Color",getBackground());
      		if (bgColor != null)
    		{	
      			FileIo.WriteOutTextColor(bgColor);
      			JOptionPane.showMessageDialog(null, "You must restart the program for your settings to take full effect.");
			}
		}
		else if(actionCommand.equals("Save"))
		{
			// there should actually be some checks here that makes sure the schedule is actually valid. 
			
			
			
			// loops through all the panels, and all the JComboBoxes and writes out
			// all the times. 
			for(int aa = 0; aa < bellpanels.length; aa++) // each schedule
			{
				// hours.length / 2 should equal the number of periods because there
				// is a start and end hour for each period. 
				
				// now write out to a file the schedule.
				
					try
					{
						PrintWriter outputStream = new PrintWriter(new FileOutputStream("schedules\\" + Integer.toString(aa) + ".dat"));
						for(int b = 0; b <Integer.parseInt(textfields[aa].getText()); b++) // each period
						{
							outputStream.print(b + ","); 	//writes the period number.
							outputStream.print(hoursbox[aa][b][0].getSelectedItem() + ","); // writes the start hour
							outputStream.print(minutesbox[aa][b][0].getSelectedItem() + ","); // writes the start minute
							outputStream.print(hoursbox[aa][b][1].getSelectedItem() + ","); // writes the end hour
							outputStream.print(minutesbox[aa][b][1].getSelectedItem()); // writes the end minute
							outputStream.println("");
						}
						outputStream.close();
					}
					catch(FileNotFoundException e)
					{
						// we don't need anything here because we will never get a file not found
						// because the file is created in the try block. 
					}
				
				
				
			}
		}
		
		
		else if(actionCommand.equals("OK") || (numberbox == a.getSource()))
		{
			//gets the number from the text field. This number should be the number
			// of bell schedules the user wants. 
			
			String temp_number = numberbox.getText();
			
			boolean goon = true;
			try
			{
				numberofschedules = Integer.parseInt(temp_number.trim());	
			}
			catch(Exception e)
			{
				JOptionPane.showMessageDialog(null, "The number you have entered is not a valid number, \n Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
				goon = false;
				numberofschedules = 1;
			}
			
			if(goon)
			{
				// reinitalize the JTabbed pane. this way if the button is pressed twice, we don't get twice as many.
				panel1.remove(bellPanel);
				bellPanel = new JTabbedPane();
    			panel1.add(bellPanel, BorderLayout.CENTER);
				
				// if the number is valid then we need to create the same number of tabs on the panel. 
				
				// this creates an array of JPanels and adds them all the bellPanel ( the JTabbed pane).
				// they are all added as their own tab. 
				
				bellpanels = new JPanel[numberofschedules];
				textfields = new JTextField[numberofschedules];
				
				for(int c = 0; c < numberofschedules; c++)
				{
					bellpanels[c] = new JPanel();
					bellPanel.addTab(Integer.toString(c+1),bellpanels[c]);
        			bellpanels[c].setBackground(FileIo.ReadInBackgroundColor());	
					bellpanels[c].setLayout(new BorderLayout());
					// creates the options for the number of periods on that
					// schedule
					
					// the scope of this JLabel can be lost (its ok) once it is added to the JPanel
					JLabel numberofperiodslabel = new JLabel("Number of Periods:");
					numberofperiodslabel.setForeground(FileIo.ReadInTextColor());
					
					//initalizes all of the JTextFields that go on all of the JPanels. 
					
					textfields[c] = new JTextField(3);
					textfields[c].addActionListener(this);
					
					
					//creates a flow panel and adds it to the top of the bellpanels[x] panel.
					// this way the numberofperiods label and the text field look right. 
					
					JPanel north_bellpanel = new JPanel();
					north_bellpanel.setBackground(FileIo.ReadInBackgroundColor());
					north_bellpanel.setLayout(new FlowLayout());
					//adds the label and the text field, then adds that to the bellpanels[x]
					north_bellpanel.add(numberofperiodslabel);
					north_bellpanel.add(textfields[c]);
					bellpanels[c].add(north_bellpanel, BorderLayout.NORTH);
				}
				
				// now at this point we have everything created that the user asked for,
				// but we need to load in the current schedules from the text files,
				// without loosing the number of schedules the user wanted. 
				
				// we need to know how many schedules already exist. 
				numberofschedules = 0; 
				while((new File("schedules\\" + numberofschedules + ".dat").exists()))
				{
					numberofschedules++;
				}
				
				// we know how many schedules are already in existance. Now we need
				// to put periods on those tabs, that are already created. 
				//but we only want to do this up until the number of tabs thereare. 
				// once the user clicks save, if there are extra files, those files
				// should be deleted. 
				for(int d = 0; d < bellPanel.getTabCount(); d++)
				{
					// now, as long as there is a file d.dat, put that schedule on tab d.
					int temp_numofperiods = 0;
					if((new File("schedules\\" + Integer.toString(d) + ".dat").exists()))
					{
						//read it in, and put it on the tab. 
						try
				    	{
				    		BufferedReader inputStream = new BufferedReader(new FileReader("schedules\\" + Integer.toString(d) + ".dat"));
				    		while(inputStream.readLine() != null)
				    		{
				    			temp_numofperiods++;
				    		}
				    		inputStream.close();
				    	}
				    	catch(FileNotFoundException e)
				    	{
				    		JOptionPane.showMessageDialog(null, "The File was not found! \n Make sure your input file exists. \n Error Code 017", "Error", JOptionPane.ERROR_MESSAGE);
							
							// makes the thread stop if the file cannot be found. 
							try
							{
								Thread.sleep(999999999);	
							}
							catch(Exception g)
							{
								
							}
				    	}
				    	catch(IOException e)
				    	{
				    		JOptionPane.showMessageDialog(null, "Error reading from saved text. \n Error Code 018", "Error", JOptionPane.ERROR_MESSAGE);
				    	}
					}
					//now we know how many periods are in the current schedule. 
					// we need to create that many JLabels for this label, and create 
					//the appropriate number of hours and minutes. in that array. 
					//---------------------------------------------------------
					int selectedtab = d;
					textfields[selectedtab].setText(Integer.toString(temp_numofperiods));
					// now that we know which tab the user is working on, we need to get the number of periods
					// the user wants to add to that schedule. 
					int numberofperiodsinbox;
					try
					{
						numberofperiodsinbox = Integer.parseInt(textfields[selectedtab].getText());
					}
					catch(Exception e)
					{
						JOptionPane.showMessageDialog(null, "The number you have entered is not a valid number, \n Default 1 will be used.", "Error", JOptionPane.ERROR_MESSAGE);
						numberofperiodsinbox = 1;
					}
					
					// now that we know how many periods the user wants to add to that period
					// the fields and labels need to be set up for that amount of time
					
					//creates an array of JComboBoxes for the hours and the minutes. 
					hoursbox = new JComboBox[numberofschedules][numberofperiodsinbox*2][2];
					minutesbox = new JComboBox[numberofschedules][numberofperiodsinbox*2][2];
					
					// initalize all of the comboboxes
					for(int aa = 0; aa < numberofschedules; aa++)
					{
						for(int c = 0; c < numberofperiodsinbox; c++)
						{
							hoursbox[aa][c][0] = new JComboBox(hours);
							minutesbox[aa][c][0] = new JComboBox(minutes);
							hoursbox[aa][c][1] = new JComboBox(hours);
							minutesbox[aa][c][1] = new JComboBox(minutes);
						}
						
					}
					
					
					//this flowpanel serves for the west side of the bellpanels[c];
					//the labels are added to this flow, then the flow is added to the bellpanels.
					JPanel center_bellpanel = new JPanel();
					center_bellpanel.setLayout(new FlowLayout());
					center_bellpanel.setBackground(FileIo.ReadInBackgroundColor());
					
					// create an array of JLabels to be put on this tab. These will be the period numbers. 
					// sets the layout on this tab
					JLabel periodnumlabels[] = new JLabel[numberofperiodsinbox];
					
					
					
					for(int c = 0; c < numberofperiodsinbox; c++)
					{
						
						periodnumlabels[c] = new JLabel(Integer.toString(c));
						periodnumlabels[c].setForeground(FileIo.ReadInTextColor());
						center_bellpanel.add(periodnumlabels[c]);
						
						// now we need to add a JCombo for the hour
						center_bellpanel.add(hoursbox[selectedtab][c][0]);
						
						// adds the : between the hours and minutes
						
						JLabel colon = new JLabel(":");
						colon.setForeground(FileIo.ReadInTextColor());
						center_bellpanel.add(colon);
						
						// adds the minute box
						
						center_bellpanel.add(minutesbox[selectedtab][c][0]);
						
						// adds the TO in between the times
						JLabel to = new JLabel("to");
						to.setForeground(FileIo.ReadInTextColor());
						center_bellpanel.add(to);
						
						// sets the jcomboboxes up for the second time. 
					//	hoursbox[c+1] = new JComboBox(hours);
					//	minutesbox[c+1] = new JComboBox(minutes);
						
						// adds the end time
						center_bellpanel.add(hoursbox[selectedtab][c][1]);
						JLabel colon2 = new JLabel(":");
						colon2.setForeground(FileIo.ReadInTextColor());
						center_bellpanel.add(colon2);
						center_bellpanel.add(minutesbox[selectedtab][c][1]);
						
					}
					//------------------------------------------------------------------
					// This portion of code is STUPID!!!!!
					// the JComboBoxes will not appear w/o it. Dunno why. 
					// Possibly because the JPanel is not being updated, but this 
					//updates it somehow. 
					contentPane.invalidate();
					contentPane.validate();
					bellpanels[selectedtab].remove(center_bellpanel);
					bellpanels[selectedtab].add(center_bellpanel, BorderLayout.CENTER);
					setSize(WIDTH+1, HEIGHT);
					setSize(WIDTH-1, HEIGHT);
					//------------------------------------------------------------------
					//---------------------------------------------------------
				}
				
			}
		}
		else
		{
			// an else is here because it is not possible to know which
			// bell tab is being acted upon until the next process. 
			// to find out which one is selected, go by the tab.  
			
			int selectedtab = bellPanel.getSelectedIndex();
			
			// now that we know which tab the user is working on, we need to get the number of periods
			// the user wants to add to that schedule. 
			int numberofperiodsinbox;
			try
			{
				numberofperiodsinbox = Integer.parseInt(textfields[selectedtab].getText());
			}
			catch(Exception e)
			{
				JOptionPane.showMessageDialog(null, "The number you have entered is not a valid number, \n Default 1 will be used.", "Error", JOptionPane.ERROR_MESSAGE);
				numberofperiodsinbox = 1;
			}
			String temp_number = numberbox.getText();
			try
			{
				numberofschedules = Integer.parseInt(temp_number.trim());	
			}
			catch(Exception e)
			{
				JOptionPane.showMessageDialog(null, "The number you have entered is not a valid number, \n Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
			}
			
			
			
			// now that we know how many periods the user wants to add to that period
			// the fields and labels need to be set up for that amount of time
			
			//creates an array of JComboBoxes for the hours and the minutes. 
			hoursbox = new JComboBox[numberofschedules][numberofperiodsinbox*2][2];
			minutesbox = new JComboBox[numberofschedules][numberofperiodsinbox*2][2];
			
			// initalize all of the comboboxes
			for(int aa = 0; aa < numberofschedules; aa++)
			{
				for(int c = 0; c < numberofperiodsinbox; c++)
				{
					hoursbox[aa][c][0] = new JComboBox(hours);
					minutesbox[aa][c][0] = new JComboBox(minutes);
					hoursbox[aa][c][1] = new JComboBox(hours);
					minutesbox[aa][c][1] = new JComboBox(minutes);
				}
				
			}
			
			
			//this flowpanel serves for the west side of the bellpanels[c];
			//the labels are added to this flow, then the flow is added to the bellpanels.
			JPanel center_bellpanel = new JPanel();
			center_bellpanel.setLayout(new FlowLayout());
			center_bellpanel.setBackground(FileIo.ReadInBackgroundColor());
			
			// create an array of JLabels to be put on this tab. These will be the period numbers. 
			// sets the layout on this tab
			JLabel periodnumlabels[] = new JLabel[numberofperiodsinbox];
			
			
			
			for(int c = 0; c < numberofperiodsinbox; c++)
			{
				
				periodnumlabels[c] = new JLabel(Integer.toString(c));
				periodnumlabels[c].setForeground(FileIo.ReadInTextColor());
				center_bellpanel.add(periodnumlabels[c]);
				
				// now we need to add a JCombo for the hour
				center_bellpanel.add(hoursbox[selectedtab][c][0]);
				
				// adds the : between the hours and minutes
				
				JLabel colon = new JLabel(":");
				colon.setForeground(FileIo.ReadInTextColor());
				center_bellpanel.add(colon);
				
				// adds the minute box
				
				center_bellpanel.add(minutesbox[selectedtab][c][0]);
				
				// adds the TO in between the times
				JLabel to = new JLabel("to");
				to.setForeground(FileIo.ReadInTextColor());
				center_bellpanel.add(to);
				
				// sets the jcomboboxes up for the second time. 
			//	hoursbox[c+1] = new JComboBox(hours);
			//	minutesbox[c+1] = new JComboBox(minutes);
				
				// adds the end time
				center_bellpanel.add(hoursbox[selectedtab][c][1]);
				JLabel colon2 = new JLabel(":");
				colon2.setForeground(FileIo.ReadInTextColor());
				center_bellpanel.add(colon2);
				center_bellpanel.add(minutesbox[selectedtab][c][1]);
				
			}
			//------------------------------------------------------------------
			// This portion of code is STUPID!!!!!
			// the JComboBoxes will not appear w/o it. Dunno why. 
			// Possibly because the JPanel is not being updated, but this 
			//updates it somehow. 
			contentPane.invalidate();
			contentPane.validate();
			bellpanels[selectedtab].remove(center_bellpanel);
			bellpanels[selectedtab].add(center_bellpanel, BorderLayout.CENTER);
			setSize(WIDTH+1, HEIGHT);
			setSize(WIDTH-1, HEIGHT);
			//------------------------------------------------------------------
			
		}
	
		
		
	}
	
}